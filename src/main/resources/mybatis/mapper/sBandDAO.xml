<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace는 이 매퍼가 어떤 인터페이스와 연관된 매퍼인지를 설정 -->
<mapper namespace="com.ex.springboot.dao.IBandDAO">
<!-- id는 인터페이스에 정의된 메서드의 이름이며 resultType은 결과 타입을 지정한다. -->
	
	<!-- 로그인한 멤버 정보 -->
	<select id="bandLoginMemberDto" resultType="com.ex.springboot.dto.MemberDTO">
		select * from carrier_member where Member_Id = #{param1}
	</select>
	
	<!-- 전체 밴드 리스트 출력 -->
	<select id="bandList" resultType="com.ex.springboot.dto.BandDTO">
		select * from band
	</select>
	
	<!-- 밴드 별 피드 전체 목록  -->
	<select id="bandFeedList" resultType="com.ex.springboot.dto.BandFeedDTO">
		<!-- select * from band_feed where band_code = ${param1} -->
		select A.band_feed_num, A.band_code, A.Member_id, A.band_feed_content, A.band_feed_uploadday, A.band_feed_updateday, A.band_feed_hit ,B.Member_profileimage from band_feed A right outer join carrier_member B on A.Member_id = B.Member_id where A.band_code = #{param1} order by A.band_feed_num desc    
	</select>
	
	<!-- 밴드 피드 세부보기 -->
	<select id="bandFeedViewItem" resultType="com.ex.springboot.dto.BandFeedDTO">
		select A.band_feed_num, A.band_code, A.Member_id, A.band_feed_content, A.band_feed_uploadday, A.band_feed_updateday, A.band_feed_hit ,B.Member_profileimage from band_feed A right outer join carrier_member B on A.Member_id = B.Member_id where A.band_feed_num = #{param1}   
	</select>
	
	<!-- myband 페이지 리스트 -->
	<select id="myBand" resultType="com.ex.springboot.dto.BandDTO">
   		select * from band where band_code = #{param1} 
    </select>
    
    <!-- 밴드명으로 밴드DTO 출력하기 -->
   	<select id="bandName_search" resultType="com.ex.springboot.dto.BandDTO">
		select * from band where band_name = #{param1}
	</select>
	
	<!-- resultType은 리턴되는 값의 타입을 지정, insert와 delete는 결과값이 없으므로 select와 달리 리턴 타입을 지정안함 -->
	<!-- 밴드 생성 -->
	<insert id="bandCreateDao">
		insert into band (band_code, band_name, band_admin, band_memberCount, band_content, band_thumnail, band_theme, band_area ,band_day) 
			values(band_seq.nextval, #{band_name}, #{band_admin}, 1, #{band_content}, #{band_thumnail}, #{band_theme}, #{band_area}, sysdate )
	</insert>
	
	<!-- 밴드 피드 작성 -->
	<insert id="bandFeedWrite">
		insert into band_feed (band_feed_num, band_code ,Member_id, band_feed_content, band_feed_uploadday, band_feed_updateday, band_feed_hit) 
			values (band_feed_seq.nextval, #{band_code}, #{Member_id}, #{band_feed_content}, sysdate, sysdate , 0)
	</insert>
	
	
	
	<!-- 밴드 작성한 사람의 이미지 출력 구문 -->
	<select id="bandWriterImg" resultType="com.ex.springboot.dto.MemberDTO">
		select * from carrier_member where Member_id = #{Member_id}
	</select>
	
	<!-- 밴드 글 수정 -->
	<update id="bandFeedUpdate">
		update band_feed set band_feed_content = #{band_feed_content} ,  band_feed_updateday = sysdate where member_id = #{member_id} and band_code = #{band_code} and band_feed_num = #{band_feed_num}
	</update>
	
	<!-- 밴드 글 삭제 -->
	<delete id="bandFeedDelete">
		delete from band_feed where band_feed_num = #{band_feed_num} and band_code = #{band_code} 
	</delete>
	
	<!-- 가입한 밴드 리스트 출력 -->
	<select id="joinBandList" resultType="com.ex.springboot.dto.Band_joinMemberDTO">
		select A.band_joinMember_num, A.band_code, A.Member_Id, B.band_name, B.band_memberCount, B.band_thumnail from band_joinMember A right outer join band B on A.band_code = B.band_code where A.Member_Id = #{param1}
	</select>
	
	<!-- mypage 가입한 밴드 리스트 출력 -->
	<select id="mypage_joinBandList" resultType="com.ex.springboot.dto.Band_joinMemberDTO">
		select A.band_joinMember_num, A.band_code, A.Member_Id, B.band_name, B.band_memberCount, B.band_thumnail from band_joinMember A right outer join band B on A.band_code = B.band_code where A.Member_Id = #{param1}
	</select>
	
	<!-- 가입한 밴드인지 확인 -->
	<select id="checkJoinMember" resultType="com.ex.springboot.dto.Band_joinMemberDTO">
		select * from band_joinMember where band_code = #{param1} and Member_Id = #{param2}
	</select>
	
	
	
	<!-- 밴드 가입하기 -->
	<insert id="bandJoinMember">
		insert into band_joinMember (band_joinMember_num, band_code, Member_Id )values( band_joinMember_seq.nextval, #{param1}, #{param2})
	</insert>
	
	<!-- 밴드 가입 시 멤버 회원 수 증가  -->
	<update id="bandMembercount_plus">
		update band set Band_memberCount = Band_memberCount + 1 where band_code = #{param1} 
	</update>
	
	<!-- 밴드 가입 시 멤버 회원 수 감소  -->
	<update id="bandMembercount_minus">
		update band set Band_memberCount = Band_memberCount -1 where band_code = #{param1} 
	</update>
	
	<!-- 밴드 정보 수정하기 -->
	<update id="bandInfoUpdate">
		update band set band_thumnail = #{band_thumnail} , band_name = #{band_name} ,band_content = #{band_content}, band_theme = #{band_theme}, band_area = #{band_area} where band_code = #{band_code}
	</update>
	
	<!-- 밴드 삭제하기 -->
	<delete id="bandInfoDelete">
		delete from band where band_code = #{band_code}
	</delete>
	
	<!-- 밴드 멤버 삭제하기 -->
	<delete id="bandInfoDelete_member">
		delete from band_joinMember where band_code = #{band_code}
	</delete>
	
	<!-- 가입한 밴드 탈퇴하기  -->
	<delete id="withdrawalJoinBand">
		delete from band_joinMember where band_code = #{band_code} and Member_Id = #{member_id}
	</delete>
	
	<!-- 생성된 밴드 랜덤으로 6개 출력 -->
	<select id="randomBandList" resultType="com.ex.springboot.dto.BandDTO">
		<![CDATA[
			select * from ( select * from band order by dbms_random.value )where ROWNUM <=  6
		]]>
	</select>
	<!-- index페이지 밴드 랜덤 3개 출력 -->
	<select id="randomBandList_home" resultType="com.ex.springboot.dto.BandDTO">
		<![CDATA[
			select * from ( select * from band order by dbms_random.value )where ROWNUM <=  3
		]]>
	</select>
	
	<!-- 밴드 채팅 전체 리스트 출력 -->
	<select id="bandChatList" resultType="com.ex.springboot.dto.Band_chatDTO">
		SELECT bc.band_chat_room, bc.band_code, bc.chat_Id, cm.Member_profileimage, bc.chat_message, bc.chat_time FROM band_chat bc JOIN carrier_member cm ON bc.chat_Id = cm.Member_Id where bc.band_chat_room = #{band_chat_room} order by chat_time asc 
	</select>
	
	<!-- 밴드 채팅 방 이름 체크 -->
	<select id="bandChatRoomCheck" resultType="com.ex.springboot.dto.Band_chatDTO">
		select * from band_chat where band_chat_room = #{band_chat_room}
	</select>
	
	
	<!-- 밴드 채팅 입력시 -->
	<insert id="userbandChatWrite">
		insert into band_chat values ( #{band_chat_room}, #{band_code} , #{chat_Id} , #{chat_message} , sysdate) 
	</insert>
	
	<!-- 밴드 피드 별 댓글 수 -->
	<select id="bandFeedCommentCount" resultType='java.lang.Integer'>
		<![CDATA[
			select COUNT(*) from band_feedComment where band_feed_num = #{param1}
		]]>
	</select>
	
	<!-- 밴드 댓글 전체 리스트 -->
	<select id="bandFeedCommentAll" resultType='com.ex.springboot.dto.Band_commentDTO'>
		<![CDATA[
			SELECT  
				bfc.band_feedComment_num , 
       			bfc.band_feed_num , 
       			bfc.Member_Id , 
       			bfc.band_feedComment_content , 
       			bfc.bandFeed_comment_writeTime , 
       			cm.Member_profileimage 
			FROM band_feedComment bfc 
				JOIN carrier_member cm ON bfc.Member_Id = cm.Member_Id 
			ORDER BY bfc.bandFeed_comment_writeTime DESC 
		]]>
	</select>
	
	<!-- 밴드 피드별 댓글 리스트 -->
	<select id="bandFeedCommentList" resultType='com.ex.springboot.dto.Band_commentDTO'>
		<![CDATA[
			SELECT  
				bfc.band_feedComment_num , 
       			bfc.band_feed_num , 
       			bfc.Member_Id , 
       			bfc.band_feedComment_content , 
       			bfc.bandFeed_comment_writeTime , 
       			cm.Member_profileimage 
			FROM band_feedComment bfc 
				JOIN carrier_member cm ON bfc.Member_Id = cm.Member_Id 
			where bfc.band_feed_num = #{param1}
			ORDER BY bfc.bandFeed_comment_writeTime DESC 
		]]>
	</select>
	
	<!-- 밴드 피드별 댓글 최상단 1개 출력 -->
	<select id="bandFeedCommentTop" resultType='com.ex.springboot.dto.Band_commentDTO'>
		<![CDATA[
			SELECT  
				bfc.band_feedComment_num , 
       			bfc.band_feed_num , 
       			bfc.Member_Id , 
       			bfc.band_feedComment_content , 
       			bfc.bandFeed_comment_writeTime , 
       			cm.Member_profileimage 
			FROM band_feedComment bfc 
				JOIN carrier_member cm ON bfc.Member_Id = cm.Member_Id 
			where bfc.band_feed_num = #{param1}
			ORDER BY bfc.bandFeed_comment_writeTime DESC  
			FETCH FIRST 1 ROW ONLY 
		]]>
	</select>
	
	<!-- 밴드 댓글 작성 -->
	<insert id="band_feed_commentWrite">
		insert into band_feedComment values( 
			band_feedComment_seq.nextval, 
			#{band_feed_num} ,  
			#{Member_Id} ,  
			#{band_feedComment_content} ,  
			sysdate  
		)
	</insert>
	
	<!-- 밴드 댓글 삭제 -->
	<delete id="band_feedComment_del">
		delete from band_feedComment where band_feedComment_num = #{param1}
	</delete>
	
	<!-- 밴드 댓글 수정 -->
	<update id="band_fedComment_update">
		update band_feedComment set band_feedComment_content = #{param1} where band_feedComment_num = #{param2}
	</update>
	
	<!-- 수정하는 밴드를 제외한 밴드 리스트 출력  -->
	<select id="band_updateList" resultType="com.ex.springboot.dto.BandDTO">
		<![CDATA[
			SELECT * FROM band WHERE band_code <> #{param1}
		]]> 
	</select>
	
	<!-- 밴드 가입한 멤버 리스트 출력 -->
	<select id="joinMemberList" resultType="com.ex.springboot.dto.Band_joinMemberDTO">
		select A.band_code, A.Member_id, B.Member_profileimage from  band_joinMember A right outer join carrier_member B on A.Member_id = B.Member_id where band_code = #{param1} 
	</select>
	
	<!-- 밴드별 멤버 검색 -->
	<select id="searchBandjoinMemberList" resultType="com.ex.springboot.dto.Band_joinMemberDTO">
		select A.band_code, A.Member_id, B.Member_profileimage from  band_joinMember A right outer join carrier_member B on A.Member_id = B.Member_id where band_code = #{param1}  AND A.member_id LIKE '%' ||#{param2}|| '%'
	</select>
	
	<!-- 밴드 회원 추방 -->
	<delete id="bandMemberDelete">
		delete from band_joinMember where band_code = #{param1} and member_id = #{param2}
	</delete>
	
</mapper>