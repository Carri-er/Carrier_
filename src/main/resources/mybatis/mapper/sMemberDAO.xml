<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace는 이매퍼가 어떤 인터페이스와 연관된 매퍼인지를 설정 -->
<mapper namespace="com.ex.springboot.dao.IMemberDAO">
<!-- id는 인터페이스에 정의된 메서드의 이름이며 resultType은 결과 타입을 지정한다. -->
	
	<!-- Sign up : 회원가입 -->
	<insert id="addMember">
		INSERT INTO carrier_member 
			(Member_Name, Member_Age, Member_Id, Member_Email, Member_Phone, Member_Pw, Member_Area, Member_Thema, Member_profileimage, Member_joinDate)
		VALUES 
			(#{Member_Name}, #{Member_Age}, #{Member_Id}, #{Member_Email}, #{Member_Phone}, #{Member_Pw}, #{Member_Area}, #{Member_Thema}, #{Member_profileimage}, sysdate)
  	</insert>
  	
  	<!-- 회원 목록 불러오기 -->
  	<select id="memberList" resultType="com.ex.springboot.dto.MemberDTO">
		SELECT * FROM carrier_member WHERE Member_Id = #{Member_Id}
	</select>
	
  	<!-- 회원 수정 -->
  	<update id="editMember">
		UPDATE carrier_member SET 
				Member_Name = #{Member_Name}, 
				Member_Age = #{Member_Age}, 
				Member_Email = #{Member_Email}, 
				Member_Phone = #{Member_Phone}, 
				Member_Pw = #{Member_Pw}, 
				Member_Area = #{Member_Area}, 
				Member_Thema = #{Member_Thema}, 
				Member_profileimage = #{Member_profileimage} 
			WHERE 
				Member_Id = #{Member_Id}
	</update>
	
  	<!-- 회원 삭제 -->
  	<delete id="delMember">
		DELETE FROM carrier_member WHERE Member_Id = #{param1}
	</delete>
	
	<!-- 회원 삭제 연관 테이블 삭제 -->
	<delete id="delMember_Eventcomment">	
		delete Eventcomment where Member_id=#{param1}
	</delete>
	<delete id="delMember_Course">	
		delete Course where Member_id=#{param1}
	</delete>
	
	

  	<!-- LOGIN : 로그인 -->
  	<select id="login" resultType="com.ex.springboot.dto.MemberDTO">
		SELECT * FROM carrier_member WHERE Member_Id = #{Member_Id} AND Member_Pw = #{Member_Pw}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="Find_Id" resultType="com.ex.springboot.dto.MemberDTO">
		SELECT * FROM carrier_member WHERE Member_Name = #{Member_Name} AND Member_Email = #{Member_Email}
	</select>
	
	<!-- 비밀번호 찾기 -->
	<select id="Find_Pw" resultType="com.ex.springboot.dto.MemberDTO">
		SELECT * FROM carrier_member WHERE Member_Id = #{Member_Id} AND Member_Name = #{Member_Name} AND Member_Email = #{Member_Email}
	</select>
	
	<!-- 비밀번호 수정 -->
	<update id="FindPw_Result_Action">
		UPDATE carrier_member SET Member_Pw = #{Member_Pw} WHERE Member_Id = #{Member_Id}
	</update>
	
	<!-- member -->
	<select id="AllMemberList" resultType="com.ex.springboot.dto.MemberDTO">
		SELECT * FROM carrier_member
	</select>
	
	
</mapper>
